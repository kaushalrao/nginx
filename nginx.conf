# load external modules
load_module modules/ngx_http_js_module.so;
load_module modules/ngx_http_opentracing_module.so;

events {}

http {
     # opentracing configuration
     opentracing_load_tracer /usr/local/lib/libzipkin_opentracing_plugin.so /etc/zipkin-nginx/zipkin-config.json;
     opentracing_trace_locations off;
     opentracing on;
     log_format opentracing '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '"$host" sn="$host" '
                            '"$request" request="$request_uri" '
                            'rt=$request_time '
                            'ut="$upstream_response_time" ul="$upstream_response_length" ';

    # To hide NGINX server version
    server_tokens off;

    # Import js util files
    js_path "/etc/nginx/njs/";
    js_import util.js;

    # server block 1 listening for localhost
    server {
          listen       80 default_server;
          server_name  localhost;
          root         /usr/share/nginx/html;
          index        index.html;
          opentracing_propagate_context;

          location = /page1 {
             add_header Cache-Control "no-store";
             return 301 http://localhost:8082/page3;
          }

          location = /hello {
            add_header Cache-Control "max-age=604800";
            # js_content to invoke methods inside util js
            js_content util.hello;
          }

          location ~* /bff1 {
             proxy_pass http://localhost:8085/$request_uri;
             add_header Content-Type text/plain;
             return 200 'response from bff 1';
          }

          location ~* /bff2 {
             proxy_pass http://localhost:8083/$request_uri;
             add_header Content-Type text/plain;
             return 200 'response from bff 2';
          }

          location = /demo1 {
            js_set $toggle_value util.getToggleValue;
            add_header Content-Type text/plain;
            return 200 'Welcome to NGINX tutorial! in server1 toggle value is $toggle_value';
          }

          location = /mirror-request {
             # mirror incoming request
             mirror /mirror;
             # mirror incoming request body
             mirror_request_body on;
             add_header Content-Type text/plain;
             return 200 'gangnam style!';
          }

          location /mirror {
             internal;
             proxy_pass http://localhost:8082/page1;
          }
    }
    # server block 2 listening for 127.0.0.1
    server {
          server_name  127.0.0.1;

          location = /demo1 {
             js_set $toggle_value util.getToggleValue;
             add_header Content-Type text/plain;
             return 200 'Welcome to NGINX tutorial! in server2 toggle value is $toggle_value';
          }
    }
}